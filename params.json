{"name":"Tool-box","tagline":"Methods in common use. Supplement to jQuer, Underscore and Backbone.","body":"Detect Device\r\n-------------\r\n\r\n### Mobile\r\n\r\n    window.isMobile         // => true, false\r\n    $('html')[0].className  // => 'no-mobile', 'mobile'\r\n\r\n### Device pixel ratio\r\n\r\n    window.dpr      // => 1, 2, 3\r\n    document.cookie // => 'dpr=1'\r\n\r\n### jQuery events\r\n\r\n    $.events.click  // => 'click', 'touchend'\r\n\r\njQuery Plugins\r\n--------------\r\n\r\n### Manipulation\r\n\r\n#### `.center(marginTop, marginLeft)`\r\n\r\nPlace the element at the center of the screen\r\n\r\nYou can set up margins if the element is larger than screen size.\r\n\r\n    @param {number} [marginTop=0]\r\n    @param {number} [marginLeft=0]\r\n    @returns {jQuery}\r\n\r\n#### `.hideLoading()`\r\n\r\nHide loading effect (used with css)\r\n\r\n    @returns {jQuery}\r\n\r\n#### `.showLoading()`\r\n\r\nShow loading effect (used with css)\r\n\r\n    @returns {jQuery}\r\n\r\n#### `.swapWith(el)`\r\n\r\nSwap two elements\r\n\r\nReturns the original element.\r\n\r\n    @param {string|HTMLElement|jQuery} el\r\n    @returns {jQuery}\r\n\r\n### Offset\r\n\r\n#### `.coverPoint(x, y)`\r\n\r\nTest if an element covers the coordinate point (x, y)\r\n\r\nx, y are relative to document.\r\n\r\n    @param {number} x\r\n    @param {number} y\r\n    @returns {boolean}\r\n\r\n### Traversing\r\n\r\n#### `.isChildOf(parent)`\r\n\r\nTest if an element is the child of another\r\n\r\n    @param {string|HTMLElement|jQuery} parent\r\n    @returns {boolean}\r\n\r\n### Events\r\n\r\n#### `[data-document-close=\"#close\"]`\r\n\r\nClick on document to close opened elements and its relevant elements\r\n\r\n#### `[data-enter=\"#enter\"]`\r\n\r\nEnter key shortcut\r\n\r\nHitting enter key on the element will trigger `click` event on relative `data-enter` element.\r\n\r\n#### `[data-select-all=\"select-name\"], [data-select=\"#select-all\"]`\r\n\r\nCheckbox select-all kit\r\n\r\n#### `[data-toggle=\"#toggle\"] [data-toggle-class=\"toggle-class\"]`\r\n\r\nToggle Class\r\n\r\nClick on the element to toggle classes of other elements.\r\n\r\n* * *\r\n\r\nUnderscore Plugins\r\n------------------\r\n\r\n### Arrays\r\n\r\n#### `_.castArray(val)`\r\n\r\nPack the argument in an array\r\n\r\nReturn itself if it is an array.\r\n\r\n    @param {any} val\r\n    @returns {Array}\r\n\r\n#### `_.createArray(len, defaults)`\r\n\r\nCreate an array of certain length filled with default values\r\n\r\n    @param {number} len\r\n    @param {any}    defaults\r\n    @returns {Array}\r\n\r\n#### `_.defaultsArray(arr, obj)`\r\n\r\nAdd default values to each of array items\r\n\r\n    @param {Array}   arr\r\n    @param {Object}  obj\r\n    @returns {Array}\r\n\r\n#### `_.moveIndex(arr, item, step)`\r\n\r\nMove an item within its parent array\r\n\r\nstep > 0: move down\r\n\r\nstep < 0: move up\r\n\r\n    @param {Array} arr\r\n    @param {any} item\r\n    @param {number} step\r\n\r\n### Dates\r\n\r\n#### `_.dayStart(timestamp)`\r\n\r\nThe start point (0 millisecond) of a day\r\n\r\n    @param {number|Date} timestamp\r\n    @returns {number}\r\n\r\n#### `_.dayEnd(timestamp)`\r\n\r\nThe end point (last millisecond) of a day\r\n\r\n    @param {number|Date} timestamp\r\n    @returns {number}\r\n\r\n#### `_.formatTime(timestamp, format)`\r\n\r\nFormat a date to a string\r\n\r\nSupports: YYYY, YY, MM, M, DD, D, HH, H, mm, m, ss, s\r\n\r\n    @param {number|Date} timestamp\r\n    @param {string}      [format='YYYY-MM-DD']\r\n    @returns {string}\r\n\r\n### Objects\r\n\r\n#### `_.exists(val)`\r\n\r\nChecks whether or not the value is \"existy\"\r\n\r\nBoth null and undefined are considered non-existy values.\r\n\r\nAll other values are existy.\r\n\r\n    @param {any} val\r\n    @returns {boolean}\r\n\r\n#### `_.isNegative(num)`\r\n\r\nChecks whether the value is a negative number\r\n\r\n    @param {number} num\r\n    @returns {boolean}\r\n\r\n#### `_.isPositive(num)`\r\n\r\nChecks whether the value is a positive number\r\n\r\n    @param {number} num\r\n    @returns {boolean}\r\n\r\n#### `_.isPureObject(obj)`\r\n\r\nChecks whether the value is pure object (neither function nor regex)\r\n\r\n    @param obj\r\n    @returns {boolean}\r\n\r\n#### `_.isValidDate(date)`\r\n\r\nChecks whether the value is a valid date\r\n\r\nThat is, the value is both an instance of Date and it represents an actual date.\r\n\r\n    @param {Date} date\r\n    @returns {boolean}\r\n\r\n#### `_.notEmpty(str)`\r\n\r\nChecks the string exists and is not empty\r\n\r\n    @param {string} str\r\n    @returns {boolean}\r\n\r\n#### `_.safeExtendOwn(obj)`\r\n\r\nBehaves like _.defaults\r\n\r\nBut will log an error when a key already exists in the destination object\r\n\r\n    @param {any} obj\r\n    @returns {any}\r\n\r\n#### `_.snapshot(obj)`\r\n\r\nSnapshots/clones an object deeply\r\n\r\n    @param {Object} obj\r\n    @returns {Object}\r\n\r\n### Utility\r\n\r\n#### `_.capitalize(str)`\r\n\r\nCapitalize a string\r\n\r\nDefault behavior will not change letters after the first one\r\n\r\n    @param {string}  str\r\n    @param {boolean} lowerRest (lowercase following letters)\r\n    @returns {string}\r\n\r\n#### `_.error()`\r\n\r\nSafe console.error\r\n\r\n#### `_.int(val)`\r\n\r\nParse integer based 10\r\n\r\n    @param {number} val\r\n    @returns {number}\r\n\r\n#### `_.formatNumber(num, digits)`\r\n\r\nFormat number to styles like '1,234,567.00' or '-1,234,567.00'\r\n\r\n    @param {number} num\r\n    @param {number} digits\r\n    @returns {string}\r\n\r\n#### `_.log()`\r\n\r\nSafe console.log\r\n\r\n#### `_.num(str)`\r\n\r\nConvert a string to number if possible.\r\nIf the string can be convert to a number, return the number, or return the string.\r\n\r\n    @param {string} str\r\n    @returns {number|string}\r\n\r\n#### `_.pad(str, targetLen, pad, fromRight)`\r\n\r\nPad a string with any character to given length\r\n\r\n    @param {string}  str\r\n    @param {number}  [targetLen=2]\r\n    @param {string}  [pad='0']\r\n    @param {boolean} [fromRight=false]\r\n    @returns {string}\r\n\r\n#### `_.parseNumber(str)`\r\n\r\nParse number in formats like `1,234,567.00` to `1234567`\r\n\r\n    @param {string} str\r\n    @returns {number}\r\n\r\n#### `_.parseQuery(queryStr)`\r\n\r\nParse a query string to an object\r\n\r\n    @param {string} queryStr - like '?a=b&c=d'\r\n    @returns {Object}\r\n\r\n### Language\r\n\r\n#### `_.addLang(options)`\r\n\r\nAdd language locale keys\r\n\r\n    @param {{code:Object}}   options\r\n    @param {{locale:string}} options.code\r\n\r\n#### `_.hasLang(code)`\r\n\r\nTest if the language code has data\r\n\r\n    @param {string} code\r\n    @returns {boolean}\r\n\r\n#### `_.parseLocale(locale)`\r\n\r\nReturn a parsed Locale code of current language\r\n\r\n    @param {string} locale\r\n    @returns {string}\r\n\r\n#### `_.setLang(code)`\r\n\r\nSet langCode\r\n\r\n    @param {string} code\r\n\r\n* * *\r\n\r\nBackbone Plugin\r\n---------------\r\n\r\n### .extend(options)\r\n\r\nExtends settings objects like `defaults`, `events`, `modelEvents`, `viewEvents`.\r\n\r\nUse `this._super()` to call parent's method.\r\n\r\nTested on Model and View. Don't use it on Collection.\r\n\r\n    @param {Object} options\r\n    @returns {Object}\r\n\r\n### Backbone.ItemView\r\n\r\n#### `Backbone.ItemView.extend()`\r\n\r\n    Backbone.ItemView.extend({\r\n      template: '<div class=\"data\"><%= attr %></div>',\r\n\r\n      ui: {\r\n        data: '.data'\r\n      },\r\n\r\n      events: {\r\n        'click .data': 'onClickData'\r\n      },\r\n\r\n      modelEvents: {\r\n        change: 'onModelChange'\r\n      },\r\n\r\n      viewEvents: {\r\n        clear: 'onViewChange'\r\n      },\r\n\r\n      onInitialize: function () {},\r\n      onRender: function () {},\r\n      onRemove: function () {},\r\n\r\n      onClickData: function () {},\r\n\r\n      onModelChange: function () {},\r\n\r\n      onViewChange: function () {}\r\n    });\r\n\r\n`ui`: elements saved at `this.ui.data`\r\n\r\n`modelEvents`: model events listened\r\n\r\n`viewEvents`: view events listened\r\n\r\n`onInitialize, onRender, onRemove`: callbacks fired after `initialize, render, remove`\r\n\r\n#### `itemView.get()`\r\n#### `itemView.set()`\r\n#### `itemView.unset()`\r\n#### `itemView.clear()`\r\n\r\nThese are shortcut methods to the model.\r\n\r\n#### `itemView.dataShortcut(methods, type)`\r\n\r\nMake model or collection methods callable by the view\r\n\r\n`this` still refers to the model or collection in methods\r\n\r\n    @param {[string]} methods\r\n    @param {string}    type - 'model' or 'collection'\r\n    @returns {Backbone.ItemView}\r\n\r\n#### `itemView.listenToDataEvents(dataEvents, model)`\r\n\r\nListen to model or collection events map\r\n\r\nLike: { dataEvents: { 'change:value': 'render' } }\r\n\r\n    @param {{event: string|Function}} dataEvents\r\n    @param {Backbone.Model|Backbone.Collection} [data]\r\n    @param {string} [type]\r\n    @returns {Backbone.ItemView}\r\n\r\n#### `itemView.listenToViewEvents(viewEvents, view)`\r\n\r\nListen to view events map\r\n\r\n`viewEvents` can be an array or a map\r\n\r\nAn array will auto generate callbacks like `render` -> `onRender`\r\n\r\n    @param {[string]|{event: string|Function}}  viewEvents\r\n    @param {Backbone.View}                      [view]\r\n    @returns {Backbone.ItemView}\r\n\r\n#### `itemView.linkView(anotherView, options)`\r\n\r\nLink another view, and listens for its view events and model events\r\n\r\n`~EventsListening` means listen to another view or its model's events\r\n\r\n`~EventsListened` means another view is listening to this view or its models events\r\n\r\n    @param {Backbone.ItemView}         anotherView\r\n    @param {Object}                    options\r\n    @param {string|jQuery|HTMLElement} options.holder (effective after parent render)\r\n    @param {object}                    options.modelEventsListening\r\n    @param {object}                    options.viewEventsListening\r\n    @param {object}                    options.modelEventsListened\r\n    @param {object}                    options.viewEventsListened\r\n    @param {string}                    [options.anotherName]\r\n    @param {string}                    [options.thisName]\r\n    @returns {Backbone.ItemView}\r\n\r\n### Backbone.CollectionView\r\n\r\n#### `Backbone.CollectionView.extend()`\r\n\r\n    var CV = Backbone.CollectionView.extend({\r\n      tagName: 'ul',\r\n      childView: Backbone.ItemView.extend({\r\n        tagName: 'li',\r\n        template: '<%= id %>'\r\n      }),\r\n      collection: Backbone.Collection.extend({\r\n        model: Backbone.Model\r\n      }),\r\n      sortable: true,\r\n      onAdd: function (model, collection, prop) { }\r\n      onRemove: function (model, collection, prop) { }\r\n      onReset: function () { },\r\n      onSort: function (view, newIndex) { }\r\n    }),\r\n    cv = new CV({\r\n      collection: [ { id: 1 }, { id: 2 }, { id: 3 } ]\r\n    });\r\n\r\n`childView`: Backbone.ItemView\r\n\r\n`collection`: Backbone.Collection\r\n\r\n`onAdd`, `onRemove`, `onReset`: callbacks\r\n\r\n`sortable` and `onSort`: drag and drop sorting (jQuery UI)\r\n\r\n#### collectionView.add(model)\r\n#### collectionView.remove(model)\r\n#### collectionView.reset([model1, model2])\r\n\r\n### Backbone.Module\r\n\r\n#### Backbone.Module(options)\r\n\r\nBackbone Module builder.\r\n\r\n    var Mod = Backbone.Module({\r\n\r\n      // Model settings\r\n      dataDefaults: {\r\n        prop: 'value'\r\n      },\r\n\r\n      dataHandlers: {\r\n        initialize: function (options) {\r\n          this.init = options.init;\r\n        }\r\n      },\r\n\r\n      // View settings\r\n      template: '<a><span><%= text %></span></span></a>',\r\n\r\n      initialize: function (options) {\r\n        this.set('viewInit', options.viewInit);\r\n      },\r\n\r\n      onRender: function () {\r\n        this.setElement(this.$('a'));\r\n      },\r\n\r\n      ui: {\r\n        span: 'span'\r\n      },\r\n\r\n      // DOM events\r\n      domEvents: {\r\n        click: 'clickLink'\r\n      },\r\n\r\n      domApi: {\r\n        clickLink: function (e) {\r\n          this.set('link', this.ui.span.text());\r\n        }\r\n      },\r\n\r\n      // Model events\r\n      modelEvents: {\r\n        'change:link': 'changeLink'\r\n      },\r\n\r\n      modelApi: {\r\n        changeLink: function (model, value) {\r\n          this.set('linkChanged', value);\r\n        }\r\n      },\r\n\r\n      // View events\r\n      viewEvents: {\r\n        viewChange: 'viewChange'\r\n      },\r\n\r\n      viewApi: {\r\n        viewChange: function (value) {\r\n          this.set('viewChanged', value);\r\n        }\r\n      }\r\n    });\r\n\r\n    @param {Object}    options\r\n    @param {Object}    options.dataDefaults - Model `defaults`\r\n    @param {Object}    options.dataHandlers - other Model settings\r\n    @param {String}    options.template - View template\r\n    @param {Object}    options.ui - ui hash\r\n    @param {Function}  options.initialize\r\n    @param {Function}  options.onInitialize\r\n    @param {Function}  options.onRender\r\n    @param {Function}  options.onRemove\r\n    @param {Object}    options.domEvents\r\n    @param {Object}    options.domApi\r\n    @param {Object}    options.modelEvents\r\n    @param {Object}    options.modelApi\r\n    @param {Object}    options.viewEvents\r\n    @param {Object}    options.viewApi\r\n\r\n#### Module.create(options)\r\n\r\nCreate a Module instance.\r\n\r\n    @param {Object} options\r\n    @returns {ItemView}\r\n\r\n### Backbone.ListModule\r\n\r\n#### Backbone.ListModule(options)\r\n\r\nBackbone ListModule builder.\r\n\r\n    var Mod = Backbone.ListModule({\r\n\r\n      // Model settings\r\n      dataDefaults: {\r\n        prop: 'value'\r\n      },\r\n\r\n      dataHandlers: {\r\n        initialize: function (options) {\r\n          this.init = options.init;\r\n        }\r\n      },\r\n\r\n      // View settings\r\n      tagName: 'ul',\r\n      template: '<%= id %>',\r\n      sortable: true,\r\n\r\n      // ItemView settings\r\n      itemSettings: {\r\n        tagName: 'li',\r\n        template: '<%= id %>',\r\n\r\n        domEvents: {\r\n          click: function (e) { }\r\n        },\r\n\r\n        modelEvents: {\r\n          change: function (model, value) { }\r\n        },\r\n\r\n        viewEvents: {\r\n          viewChange: function (value) { }\r\n        }\r\n      }\r\n    });\r\n\r\n    @param {Object}    options\r\n    @param {Object}    options.itemSettings - ItemView settings\r\n\r\n#### ListModule.create(collection)\r\n\r\nCreate a ListModule instance.\r\n\r\n    @param {[Object]} collection\r\n    @returns {CollectionView}\r\n\r\n    var list = List.create([ { id: 1 }, { id: 2 } ]);\r\n\r\n    list.children   // => [ItemView]\r\n    list.collection // => Backbone.Collection","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}